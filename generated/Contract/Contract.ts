// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get btcAddr(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get claimToAddr(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get referrerAddr(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ClaimAssist extends ethereum.Event {
  get params(): ClaimAssist__Params {
    return new ClaimAssist__Params(this);
  }
}

export class ClaimAssist__Params {
  _event: ClaimAssist;

  constructor(event: ClaimAssist) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get data2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get senderAddr(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DailyDataUpdate extends ethereum.Event {
  get params(): DailyDataUpdate__Params {
    return new DailyDataUpdate__Params(this);
  }
}

export class DailyDataUpdate__Params {
  _event: DailyDataUpdate;

  constructor(event: DailyDataUpdate) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get updaterAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ShareRateChange extends ethereum.Event {
  get params(): ShareRateChange__Params {
    return new ShareRateChange__Params(this);
  }
}

export class ShareRateChange__Params {
  _event: ShareRateChange;

  constructor(event: ShareRateChange) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeEnd extends ethereum.Event {
  get params(): StakeEnd__Params {
    return new StakeEnd__Params(this);
  }
}

export class StakeEnd__Params {
  _event: StakeEnd;

  constructor(event: StakeEnd) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakerAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeGoodAccounting extends ethereum.Event {
  get params(): StakeGoodAccounting__Params {
    return new StakeGoodAccounting__Params(this);
  }
}

export class StakeGoodAccounting__Params {
  _event: StakeGoodAccounting;

  constructor(event: StakeGoodAccounting) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakerAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get senderAddr(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class StakeStart extends ethereum.Event {
  get params(): StakeStart__Params {
    return new StakeStart__Params(this);
  }
}

export class StakeStart__Params {
  _event: StakeStart;

  constructor(event: StakeStart) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakerAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class XfLobbyEnter extends ethereum.Event {
  get params(): XfLobbyEnter__Params {
    return new XfLobbyEnter__Params(this);
  }
}

export class XfLobbyEnter__Params {
  _event: XfLobbyEnter;

  constructor(event: XfLobbyEnter) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get memberAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get entryId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get referrerAddr(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class XfLobbyExit extends ethereum.Event {
  get params(): XfLobbyExit__Params {
    return new XfLobbyExit__Params(this);
  }
}

export class XfLobbyExit__Params {
  _event: XfLobbyExit;

  constructor(event: XfLobbyExit) {
    this._event = event;
  }

  get data0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get memberAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get entryId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get referrerAddr(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Contract__dailyDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDayPayoutTotal(): BigInt {
    return this.value0;
  }

  getDayStakeSharesTotal(): BigInt {
    return this.value1;
  }

  getDayUnclaimedSatoshisTotal(): BigInt {
    return this.value2;
  }
}

export class Contract__globalsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getLockedHeartsTotal(): BigInt {
    return this.value0;
  }

  getNextStakeSharesTotal(): BigInt {
    return this.value1;
  }

  getShareRate(): BigInt {
    return this.value2;
  }

  getStakePenaltyTotal(): BigInt {
    return this.value3;
  }

  getDailyDataCount(): i32 {
    return this.value4;
  }

  getStakeSharesTotal(): BigInt {
    return this.value5;
  }

  getLatestStakeId(): BigInt {
    return this.value6;
  }

  getClaimStats(): BigInt {
    return this.value7;
  }
}

export class Contract__stakeListsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getStakeId(): BigInt {
    return this.value0;
  }

  getStakedHearts(): BigInt {
    return this.value1;
  }

  getStakeShares(): BigInt {
    return this.value2;
  }

  getLockedDay(): i32 {
    return this.value3;
  }

  getStakedDays(): i32 {
    return this.value4;
  }

  getUnlockedDay(): i32 {
    return this.value5;
  }

  getIsAutoStake(): boolean {
    return this.value6;
  }
}

export class Contract__xfLobbyEntryResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getRawAmount(): BigInt {
    return this.value0;
  }

  getReferrerAddr(): Address {
    return this.value1;
  }
}

export class Contract__xfLobbyMembersResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getHeadIndex(): BigInt {
    return this.value0;
  }

  getTailIndex(): BigInt {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allocatedSupply(): BigInt {
    let result = super.call(
      "allocatedSupply",
      "allocatedSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allocatedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocatedSupply",
      "allocatedSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  btcAddressClaim(
    rawSatoshis: BigInt,
    proof: Array<Bytes>,
    claimToAddr: Address,
    pubKeyX: Bytes,
    pubKeyY: Bytes,
    claimFlags: i32,
    v: i32,
    r: Bytes,
    s: Bytes,
    autoStakeDays: BigInt,
    referrerAddr: Address
  ): BigInt {
    let result = super.call(
      "btcAddressClaim",
      "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof),
        ethereum.Value.fromAddress(claimToAddr),
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromUnsignedBigInt(autoStakeDays),
        ethereum.Value.fromAddress(referrerAddr)
      ]
    );

    return result[0].toBigInt();
  }

  try_btcAddressClaim(
    rawSatoshis: BigInt,
    proof: Array<Bytes>,
    claimToAddr: Address,
    pubKeyX: Bytes,
    pubKeyY: Bytes,
    claimFlags: i32,
    v: i32,
    r: Bytes,
    s: Bytes,
    autoStakeDays: BigInt,
    referrerAddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "btcAddressClaim",
      "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof),
        ethereum.Value.fromAddress(claimToAddr),
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromUnsignedBigInt(autoStakeDays),
        ethereum.Value.fromAddress(referrerAddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  btcAddressClaims(param0: Bytes): boolean {
    let result = super.call(
      "btcAddressClaims",
      "btcAddressClaims(bytes20):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_btcAddressClaims(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "btcAddressClaims",
      "btcAddressClaims(bytes20):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  btcAddressIsClaimable(
    btcAddr: Bytes,
    rawSatoshis: BigInt,
    proof: Array<Bytes>
  ): boolean {
    let result = super.call(
      "btcAddressIsClaimable",
      "btcAddressIsClaimable(bytes20,uint256,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(btcAddr),
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_btcAddressIsClaimable(
    btcAddr: Bytes,
    rawSatoshis: BigInt,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "btcAddressIsClaimable",
      "btcAddressIsClaimable(bytes20,uint256,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(btcAddr),
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  btcAddressIsValid(
    btcAddr: Bytes,
    rawSatoshis: BigInt,
    proof: Array<Bytes>
  ): boolean {
    let result = super.call(
      "btcAddressIsValid",
      "btcAddressIsValid(bytes20,uint256,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(btcAddr),
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_btcAddressIsValid(
    btcAddr: Bytes,
    rawSatoshis: BigInt,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "btcAddressIsValid",
      "btcAddressIsValid(bytes20,uint256,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(btcAddr),
        ethereum.Value.fromUnsignedBigInt(rawSatoshis),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimMessageMatchesSignature(
    claimToAddr: Address,
    claimParamHash: Bytes,
    pubKeyX: Bytes,
    pubKeyY: Bytes,
    claimFlags: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): boolean {
    let result = super.call(
      "claimMessageMatchesSignature",
      "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(claimToAddr),
        ethereum.Value.fromFixedBytes(claimParamHash),
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBoolean();
  }

  try_claimMessageMatchesSignature(
    claimToAddr: Address,
    claimParamHash: Bytes,
    pubKeyX: Bytes,
    pubKeyY: Bytes,
    claimFlags: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimMessageMatchesSignature",
      "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(claimToAddr),
        ethereum.Value.fromFixedBytes(claimParamHash),
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentDay(): BigInt {
    let result = super.call("currentDay", "currentDay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentDay", "currentDay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyData(param0: BigInt): Contract__dailyDataResult {
    let result = super.call(
      "dailyData",
      "dailyData(uint256):(uint72,uint72,uint56)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__dailyDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_dailyData(
    param0: BigInt
  ): ethereum.CallResult<Contract__dailyDataResult> {
    let result = super.tryCall(
      "dailyData",
      "dailyData(uint256):(uint72,uint72,uint56)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__dailyDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  dailyDataRange(beginDay: BigInt, endDay: BigInt): Array<BigInt> {
    let result = super.call(
      "dailyDataRange",
      "dailyDataRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(beginDay),
        ethereum.Value.fromUnsignedBigInt(endDay)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_dailyDataRange(
    beginDay: BigInt,
    endDay: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "dailyDataRange",
      "dailyDataRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(beginDay),
        ethereum.Value.fromUnsignedBigInt(endDay)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  globalInfo(): Array<BigInt> {
    let result = super.call("globalInfo", "globalInfo():(uint256[13])", []);

    return result[0].toBigIntArray();
  }

  try_globalInfo(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("globalInfo", "globalInfo():(uint256[13])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  globals(): Contract__globalsResult {
    let result = super.call(
      "globals",
      "globals():(uint72,uint72,uint40,uint72,uint16,uint72,uint40,uint128)",
      []
    );

    return new Contract__globalsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_globals(): ethereum.CallResult<Contract__globalsResult> {
    let result = super.tryCall(
      "globals",
      "globals():(uint72,uint72,uint40,uint72,uint16,uint72,uint40,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__globalsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleProofIsValid(merkleLeaf: Bytes, proof: Array<Bytes>): boolean {
    let result = super.call(
      "merkleProofIsValid",
      "merkleProofIsValid(bytes32,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(merkleLeaf),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_merkleProofIsValid(
    merkleLeaf: Bytes,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "merkleProofIsValid",
      "merkleProofIsValid(bytes32,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(merkleLeaf),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pubKeyToBtcAddress(pubKeyX: Bytes, pubKeyY: Bytes, claimFlags: i32): Bytes {
    let result = super.call(
      "pubKeyToBtcAddress",
      "pubKeyToBtcAddress(bytes32,bytes32,uint8):(bytes20)",
      [
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags))
      ]
    );

    return result[0].toBytes();
  }

  try_pubKeyToBtcAddress(
    pubKeyX: Bytes,
    pubKeyY: Bytes,
    claimFlags: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "pubKeyToBtcAddress",
      "pubKeyToBtcAddress(bytes32,bytes32,uint8):(bytes20)",
      [
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(claimFlags))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pubKeyToEthAddress(pubKeyX: Bytes, pubKeyY: Bytes): Address {
    let result = super.call(
      "pubKeyToEthAddress",
      "pubKeyToEthAddress(bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY)
      ]
    );

    return result[0].toAddress();
  }

  try_pubKeyToEthAddress(
    pubKeyX: Bytes,
    pubKeyY: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pubKeyToEthAddress",
      "pubKeyToEthAddress(bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(pubKeyX),
        ethereum.Value.fromFixedBytes(pubKeyY)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeCount(stakerAddr: Address): BigInt {
    let result = super.call("stakeCount", "stakeCount(address):(uint256)", [
      ethereum.Value.fromAddress(stakerAddr)
    ]);

    return result[0].toBigInt();
  }

  try_stakeCount(stakerAddr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeCount", "stakeCount(address):(uint256)", [
      ethereum.Value.fromAddress(stakerAddr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeLists(param0: Address, param1: BigInt): Contract__stakeListsResult {
    let result = super.call(
      "stakeLists",
      "stakeLists(address,uint256):(uint40,uint72,uint72,uint16,uint16,uint16,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__stakeListsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toBoolean()
    );
  }

  try_stakeLists(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__stakeListsResult> {
    let result = super.tryCall(
      "stakeLists",
      "stakeLists(address,uint256):(uint40,uint72,uint72,uint16,uint16,uint16,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stakeListsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toBoolean()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xfLobby(param0: BigInt): BigInt {
    let result = super.call("xfLobby", "xfLobby(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_xfLobby(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("xfLobby", "xfLobby(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  xfLobbyEntry(
    memberAddr: Address,
    entryId: BigInt
  ): Contract__xfLobbyEntryResult {
    let result = super.call(
      "xfLobbyEntry",
      "xfLobbyEntry(address,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(memberAddr),
        ethereum.Value.fromUnsignedBigInt(entryId)
      ]
    );

    return new Contract__xfLobbyEntryResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_xfLobbyEntry(
    memberAddr: Address,
    entryId: BigInt
  ): ethereum.CallResult<Contract__xfLobbyEntryResult> {
    let result = super.tryCall(
      "xfLobbyEntry",
      "xfLobbyEntry(address,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(memberAddr),
        ethereum.Value.fromUnsignedBigInt(entryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__xfLobbyEntryResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  xfLobbyMembers(
    param0: BigInt,
    param1: Address
  ): Contract__xfLobbyMembersResult {
    let result = super.call(
      "xfLobbyMembers",
      "xfLobbyMembers(uint256,address):(uint40,uint40)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new Contract__xfLobbyMembersResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_xfLobbyMembers(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Contract__xfLobbyMembersResult> {
    let result = super.tryCall(
      "xfLobbyMembers",
      "xfLobbyMembers(uint256,address):(uint40,uint40)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__xfLobbyMembersResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  xfLobbyPendingDays(memberAddr: Address): Array<BigInt> {
    let result = super.call(
      "xfLobbyPendingDays",
      "xfLobbyPendingDays(address):(uint256[2])",
      [ethereum.Value.fromAddress(memberAddr)]
    );

    return result[0].toBigIntArray();
  }

  try_xfLobbyPendingDays(
    memberAddr: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "xfLobbyPendingDays",
      "xfLobbyPendingDays(address):(uint256[2])",
      [ethereum.Value.fromAddress(memberAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  xfLobbyRange(beginDay: BigInt, endDay: BigInt): Array<BigInt> {
    let result = super.call(
      "xfLobbyRange",
      "xfLobbyRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(beginDay),
        ethereum.Value.fromUnsignedBigInt(endDay)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_xfLobbyRange(
    beginDay: BigInt,
    endDay: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "xfLobbyRange",
      "xfLobbyRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(beginDay),
        ethereum.Value.fromUnsignedBigInt(endDay)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BtcAddressClaimCall extends ethereum.Call {
  get inputs(): BtcAddressClaimCall__Inputs {
    return new BtcAddressClaimCall__Inputs(this);
  }

  get outputs(): BtcAddressClaimCall__Outputs {
    return new BtcAddressClaimCall__Outputs(this);
  }
}

export class BtcAddressClaimCall__Inputs {
  _call: BtcAddressClaimCall;

  constructor(call: BtcAddressClaimCall) {
    this._call = call;
  }

  get rawSatoshis(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get claimToAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get pubKeyX(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get pubKeyY(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get claimFlags(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get autoStakeDays(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get referrerAddr(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class BtcAddressClaimCall__Outputs {
  _call: BtcAddressClaimCall;

  constructor(call: BtcAddressClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DailyDataUpdateCall extends ethereum.Call {
  get inputs(): DailyDataUpdateCall__Inputs {
    return new DailyDataUpdateCall__Inputs(this);
  }

  get outputs(): DailyDataUpdateCall__Outputs {
    return new DailyDataUpdateCall__Outputs(this);
  }
}

export class DailyDataUpdateCall__Inputs {
  _call: DailyDataUpdateCall;

  constructor(call: DailyDataUpdateCall) {
    this._call = call;
  }

  get beforeDay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DailyDataUpdateCall__Outputs {
  _call: DailyDataUpdateCall;

  constructor(call: DailyDataUpdateCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class StakeEndCall extends ethereum.Call {
  get inputs(): StakeEndCall__Inputs {
    return new StakeEndCall__Inputs(this);
  }

  get outputs(): StakeEndCall__Outputs {
    return new StakeEndCall__Outputs(this);
  }
}

export class StakeEndCall__Inputs {
  _call: StakeEndCall;

  constructor(call: StakeEndCall) {
    this._call = call;
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeIdParam(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeEndCall__Outputs {
  _call: StakeEndCall;

  constructor(call: StakeEndCall) {
    this._call = call;
  }
}

export class StakeGoodAccountingCall extends ethereum.Call {
  get inputs(): StakeGoodAccountingCall__Inputs {
    return new StakeGoodAccountingCall__Inputs(this);
  }

  get outputs(): StakeGoodAccountingCall__Outputs {
    return new StakeGoodAccountingCall__Outputs(this);
  }
}

export class StakeGoodAccountingCall__Inputs {
  _call: StakeGoodAccountingCall;

  constructor(call: StakeGoodAccountingCall) {
    this._call = call;
  }

  get stakerAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get stakeIdParam(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeGoodAccountingCall__Outputs {
  _call: StakeGoodAccountingCall;

  constructor(call: StakeGoodAccountingCall) {
    this._call = call;
  }
}

export class StakeStartCall extends ethereum.Call {
  get inputs(): StakeStartCall__Inputs {
    return new StakeStartCall__Inputs(this);
  }

  get outputs(): StakeStartCall__Outputs {
    return new StakeStartCall__Outputs(this);
  }
}

export class StakeStartCall__Inputs {
  _call: StakeStartCall;

  constructor(call: StakeStartCall) {
    this._call = call;
  }

  get newStakedHearts(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStakedDays(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeStartCall__Outputs {
  _call: StakeStartCall;

  constructor(call: StakeStartCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class XfLobbyEnterCall extends ethereum.Call {
  get inputs(): XfLobbyEnterCall__Inputs {
    return new XfLobbyEnterCall__Inputs(this);
  }

  get outputs(): XfLobbyEnterCall__Outputs {
    return new XfLobbyEnterCall__Outputs(this);
  }
}

export class XfLobbyEnterCall__Inputs {
  _call: XfLobbyEnterCall;

  constructor(call: XfLobbyEnterCall) {
    this._call = call;
  }

  get referrerAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class XfLobbyEnterCall__Outputs {
  _call: XfLobbyEnterCall;

  constructor(call: XfLobbyEnterCall) {
    this._call = call;
  }
}

export class XfLobbyExitCall extends ethereum.Call {
  get inputs(): XfLobbyExitCall__Inputs {
    return new XfLobbyExitCall__Inputs(this);
  }

  get outputs(): XfLobbyExitCall__Outputs {
    return new XfLobbyExitCall__Outputs(this);
  }
}

export class XfLobbyExitCall__Inputs {
  _call: XfLobbyExitCall;

  constructor(call: XfLobbyExitCall) {
    this._call = call;
  }

  get enterDay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class XfLobbyExitCall__Outputs {
  _call: XfLobbyExitCall;

  constructor(call: XfLobbyExitCall) {
    this._call = call;
  }
}

export class XfLobbyFlushCall extends ethereum.Call {
  get inputs(): XfLobbyFlushCall__Inputs {
    return new XfLobbyFlushCall__Inputs(this);
  }

  get outputs(): XfLobbyFlushCall__Outputs {
    return new XfLobbyFlushCall__Outputs(this);
  }
}

export class XfLobbyFlushCall__Inputs {
  _call: XfLobbyFlushCall;

  constructor(call: XfLobbyFlushCall) {
    this._call = call;
  }
}

export class XfLobbyFlushCall__Outputs {
  _call: XfLobbyFlushCall;

  constructor(call: XfLobbyFlushCall) {
    this._call = call;
  }
}
