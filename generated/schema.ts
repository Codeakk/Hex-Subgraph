// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class _StakeStart extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _StakeStart entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _StakeStart must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_StakeStart", id.toString(), this);
    }
  }

  static load(id: string): _StakeStart | null {
    return changetype<_StakeStart | null>(store.get("_StakeStart", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakerAddr(): Bytes {
    let value = this.get("stakerAddr");
    return value!.toBytes();
  }

  set stakerAddr(value: Bytes) {
    this.set("stakerAddr", Value.fromBytes(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value!.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get stakedHearts(): BigInt {
    let value = this.get("stakedHearts");
    return value!.toBigInt();
  }

  set stakedHearts(value: BigInt) {
    this.set("stakedHearts", Value.fromBigInt(value));
  }

  get stakeShares(): BigInt {
    let value = this.get("stakeShares");
    return value!.toBigInt();
  }

  set stakeShares(value: BigInt) {
    this.set("stakeShares", Value.fromBigInt(value));
  }

  get stakedDays(): BigInt {
    let value = this.get("stakedDays");
    return value!.toBigInt();
  }

  set stakedDays(value: BigInt) {
    this.set("stakedDays", Value.fromBigInt(value));
  }

  get isAutoStake(): boolean {
    let value = this.get("isAutoStake");
    return value!.toBoolean();
  }

  set isAutoStake(value: boolean) {
    this.set("isAutoStake", Value.fromBoolean(value));
  }

  get stakeTShares(): BigDecimal {
    let value = this.get("stakeTShares");
    return value!.toBigDecimal();
  }

  set stakeTShares(value: BigDecimal) {
    this.set("stakeTShares", Value.fromBigDecimal(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }

  get stakeEnd(): string | null {
    let value = this.get("stakeEnd");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakeEnd(value: string | null) {
    if (!value) {
      this.unset("stakeEnd");
    } else {
      this.set("stakeEnd", Value.fromString(<string>value));
    }
  }

  get stakeGoodAccounting(): string | null {
    let value = this.get("stakeGoodAccounting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakeGoodAccounting(value: string | null) {
    if (!value) {
      this.unset("stakeGoodAccounting");
    } else {
      this.set("stakeGoodAccounting", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigDecimal {
    let value = this.get("blockNumber");
    return value!.toBigDecimal();
  }

  set blockNumber(value: BigDecimal) {
    this.set("blockNumber", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _StakeEnd extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _StakeEnd entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _StakeEnd must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_StakeEnd", id.toString(), this);
    }
  }

  static load(id: string): _StakeEnd | null {
    return changetype<_StakeEnd | null>(store.get("_StakeEnd", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakerAddr(): Bytes {
    let value = this.get("stakerAddr");
    return value!.toBytes();
  }

  set stakerAddr(value: Bytes) {
    this.set("stakerAddr", Value.fromBytes(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value!.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get data1(): BigInt {
    let value = this.get("data1");
    return value!.toBigInt();
  }

  set data1(value: BigInt) {
    this.set("data1", Value.fromBigInt(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get stakedHearts(): BigInt {
    let value = this.get("stakedHearts");
    return value!.toBigInt();
  }

  set stakedHearts(value: BigInt) {
    this.set("stakedHearts", Value.fromBigInt(value));
  }

  get stakedShares(): BigInt {
    let value = this.get("stakedShares");
    return value!.toBigInt();
  }

  set stakedShares(value: BigInt) {
    this.set("stakedShares", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value!.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }

  get servedDays(): BigInt {
    let value = this.get("servedDays");
    return value!.toBigInt();
  }

  set servedDays(value: BigInt) {
    this.set("servedDays", Value.fromBigInt(value));
  }

  get prevUnlocked(): boolean {
    let value = this.get("prevUnlocked");
    return value!.toBoolean();
  }

  set prevUnlocked(value: boolean) {
    this.set("prevUnlocked", Value.fromBoolean(value));
  }

  get daysLate(): BigInt {
    let value = this.get("daysLate");
    return value!.toBigInt();
  }

  set daysLate(value: BigInt) {
    this.set("daysLate", Value.fromBigInt(value));
  }

  get daysEarly(): BigInt {
    let value = this.get("daysEarly");
    return value!.toBigInt();
  }

  set daysEarly(value: BigInt) {
    this.set("daysEarly", Value.fromBigInt(value));
  }

  get blockNumber(): BigDecimal {
    let value = this.get("blockNumber");
    return value!.toBigDecimal();
  }

  set blockNumber(value: BigDecimal) {
    this.set("blockNumber", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _StakeGoodAccounting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _StakeGoodAccounting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _StakeGoodAccounting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_StakeGoodAccounting", id.toString(), this);
    }
  }

  static load(id: string): _StakeGoodAccounting | null {
    return changetype<_StakeGoodAccounting | null>(
      store.get("_StakeGoodAccounting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakerAddr(): Bytes {
    let value = this.get("stakerAddr");
    return value!.toBytes();
  }

  set stakerAddr(value: Bytes) {
    this.set("stakerAddr", Value.fromBytes(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value!.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get data1(): BigInt {
    let value = this.get("data1");
    return value!.toBigInt();
  }

  set data1(value: BigInt) {
    this.set("data1", Value.fromBigInt(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get stakedHearts(): BigInt {
    let value = this.get("stakedHearts");
    return value!.toBigInt();
  }

  set stakedHearts(value: BigInt) {
    this.set("stakedHearts", Value.fromBigInt(value));
  }

  get stakedShares(): BigInt {
    let value = this.get("stakedShares");
    return value!.toBigInt();
  }

  set stakedShares(value: BigInt) {
    this.set("stakedShares", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get penalty(): BigInt {
    let value = this.get("penalty");
    return value!.toBigInt();
  }

  set penalty(value: BigInt) {
    this.set("penalty", Value.fromBigInt(value));
  }

  get blockNumber(): BigDecimal {
    let value = this.get("blockNumber");
    return value!.toBigDecimal();
  }

  set blockNumber(value: BigDecimal) {
    this.set("blockNumber", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _ShareRateChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _ShareRateChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _ShareRateChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_ShareRateChange", id.toString(), this);
    }
  }

  static load(id: string): _ShareRateChange | null {
    return changetype<_ShareRateChange | null>(
      store.get("_ShareRateChange", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value!.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get shareRate(): BigInt {
    let value = this.get("shareRate");
    return value!.toBigInt();
  }

  set shareRate(value: BigInt) {
    this.set("shareRate", Value.fromBigInt(value));
  }

  get tShareRateHearts(): BigDecimal {
    let value = this.get("tShareRateHearts");
    return value!.toBigDecimal();
  }

  set tShareRateHearts(value: BigDecimal) {
    this.set("tShareRateHearts", Value.fromBigDecimal(value));
  }

  get tShareRateHex(): BigDecimal {
    let value = this.get("tShareRateHex");
    return value!.toBigDecimal();
  }

  set tShareRateHex(value: BigDecimal) {
    this.set("tShareRateHex", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigDecimal {
    let value = this.get("blockNumber");
    return value!.toBigDecimal();
  }

  set blockNumber(value: BigDecimal) {
    this.set("blockNumber", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_Claim", id.toString(), this);
    }
  }

  static load(id: string): _Claim | null {
    return changetype<_Claim | null>(store.get("_Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get data1(): BigInt {
    let value = this.get("data1");
    return value!.toBigInt();
  }

  set data1(value: BigInt) {
    this.set("data1", Value.fromBigInt(value));
  }

  get btcAddr(): Bytes {
    let value = this.get("btcAddr");
    return value!.toBytes();
  }

  set btcAddr(value: Bytes) {
    this.set("btcAddr", Value.fromBytes(value));
  }

  get claimToAddr(): Bytes {
    let value = this.get("claimToAddr");
    return value!.toBytes();
  }

  set claimToAddr(value: Bytes) {
    this.set("claimToAddr", Value.fromBytes(value));
  }

  get referrerAddr(): Bytes {
    let value = this.get("referrerAddr");
    return value!.toBytes();
  }

  set referrerAddr(value: Bytes) {
    this.set("referrerAddr", Value.fromBytes(value));
  }
}

export class _ClaimAssist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _ClaimAssist entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _ClaimAssist must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_ClaimAssist", id.toString(), this);
    }
  }

  static load(id: string): _ClaimAssist | null {
    return changetype<_ClaimAssist | null>(store.get("_ClaimAssist", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get data1(): BigInt {
    let value = this.get("data1");
    return value!.toBigInt();
  }

  set data1(value: BigInt) {
    this.set("data1", Value.fromBigInt(value));
  }

  get data2(): BigInt {
    let value = this.get("data2");
    return value!.toBigInt();
  }

  set data2(value: BigInt) {
    this.set("data2", Value.fromBigInt(value));
  }

  get senderAddr(): Bytes {
    let value = this.get("senderAddr");
    return value!.toBytes();
  }

  set senderAddr(value: Bytes) {
    this.set("senderAddr", Value.fromBytes(value));
  }
}

export class _DailyDataUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _DailyDataUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _DailyDataUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_DailyDataUpdate", id.toString(), this);
    }
  }

  static load(id: string): _DailyDataUpdate | null {
    return changetype<_DailyDataUpdate | null>(
      store.get("_DailyDataUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get updaterAddr(): Bytes {
    let value = this.get("updaterAddr");
    return value!.toBytes();
  }

  set updaterAddr(value: Bytes) {
    this.set("updaterAddr", Value.fromBytes(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get timestamp(): BigDecimal {
    let value = this.get("timestamp");
    return value!.toBigDecimal();
  }

  set timestamp(value: BigDecimal) {
    this.set("timestamp", Value.fromBigDecimal(value));
  }

  get beginDay(): i32 {
    let value = this.get("beginDay");
    return value!.toI32();
  }

  set beginDay(value: i32) {
    this.set("beginDay", Value.fromI32(value));
  }

  get endDay(): i32 {
    let value = this.get("endDay");
    return value!.toI32();
  }

  set endDay(value: i32) {
    this.set("endDay", Value.fromI32(value));
  }

  get isAutoUpdate(): boolean {
    let value = this.get("isAutoUpdate");
    return value!.toBoolean();
  }

  set isAutoUpdate(value: boolean) {
    this.set("isAutoUpdate", Value.fromBoolean(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get shares(): BigDecimal {
    let value = this.get("shares");
    return value!.toBigDecimal();
  }

  set shares(value: BigDecimal) {
    this.set("shares", Value.fromBigDecimal(value));
  }

  get sats(): BigDecimal {
    let value = this.get("sats");
    return value!.toBigDecimal();
  }

  set sats(value: BigDecimal) {
    this.set("sats", Value.fromBigDecimal(value));
  }

  get payoutPerTShare(): BigDecimal {
    let value = this.get("payoutPerTShare");
    return value!.toBigDecimal();
  }

  set payoutPerTShare(value: BigDecimal) {
    this.set("payoutPerTShare", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigDecimal {
    let value = this.get("blockNumber");
    return value!.toBigDecimal();
  }

  set blockNumber(value: BigDecimal) {
    this.set("blockNumber", Value.fromBigDecimal(value));
  }

  get lobbyEth(): BigDecimal | null {
    let value = this.get("lobbyEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lobbyEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("lobbyEth");
    } else {
      this.set("lobbyEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lobbyHexAvailable(): BigDecimal | null {
    let value = this.get("lobbyHexAvailable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lobbyHexAvailable(value: BigDecimal | null) {
    if (!value) {
      this.unset("lobbyHexAvailable");
    } else {
      this.set("lobbyHexAvailable", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lobbyHexPerEth(): BigDecimal | null {
    let value = this.get("lobbyHexPerEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lobbyHexPerEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("lobbyHexPerEth");
    } else {
      this.set("lobbyHexPerEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _XfLobbyEnter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _XfLobbyEnter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _XfLobbyEnter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_XfLobbyEnter", id.toString(), this);
    }
  }

  static load(id: string): _XfLobbyEnter | null {
    return changetype<_XfLobbyEnter | null>(store.get("_XfLobbyEnter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigDecimal {
    let value = this.get("timestamp");
    return value!.toBigDecimal();
  }

  set timestamp(value: BigDecimal) {
    this.set("timestamp", Value.fromBigDecimal(value));
  }

  get memberAddr(): Bytes {
    let value = this.get("memberAddr");
    return value!.toBytes();
  }

  set memberAddr(value: Bytes) {
    this.set("memberAddr", Value.fromBytes(value));
  }

  get entryId(): BigInt {
    let value = this.get("entryId");
    return value!.toBigInt();
  }

  set entryId(value: BigInt) {
    this.set("entryId", Value.fromBigInt(value));
  }

  get rawAmount(): BigDecimal {
    let value = this.get("rawAmount");
    return value!.toBigDecimal();
  }

  set rawAmount(value: BigDecimal) {
    this.set("rawAmount", Value.fromBigDecimal(value));
  }

  get referrerAddr(): Bytes {
    let value = this.get("referrerAddr");
    return value!.toBytes();
  }

  set referrerAddr(value: Bytes) {
    this.set("referrerAddr", Value.fromBytes(value));
  }

  get xfLobbyExit(): string | null {
    let value = this.get("xfLobbyExit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set xfLobbyExit(value: string | null) {
    if (!value) {
      this.unset("xfLobbyExit");
    } else {
      this.set("xfLobbyExit", Value.fromString(<string>value));
    }
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get enterDay(): BigDecimal {
    let value = this.get("enterDay");
    return value!.toBigDecimal();
  }

  set enterDay(value: BigDecimal) {
    this.set("enterDay", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _XfLobbyExit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _XfLobbyExit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _XfLobbyExit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_XfLobbyExit", id.toString(), this);
    }
  }

  static load(id: string): _XfLobbyExit | null {
    return changetype<_XfLobbyExit | null>(store.get("_XfLobbyExit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigDecimal {
    let value = this.get("timestamp");
    return value!.toBigDecimal();
  }

  set timestamp(value: BigDecimal) {
    this.set("timestamp", Value.fromBigDecimal(value));
  }

  get memberAddr(): Bytes {
    let value = this.get("memberAddr");
    return value!.toBytes();
  }

  set memberAddr(value: Bytes) {
    this.set("memberAddr", Value.fromBytes(value));
  }

  get entryId(): BigInt {
    let value = this.get("entryId");
    return value!.toBigInt();
  }

  set entryId(value: BigInt) {
    this.set("entryId", Value.fromBigInt(value));
  }

  get xfAmount(): BigDecimal {
    let value = this.get("xfAmount");
    return value!.toBigDecimal();
  }

  set xfAmount(value: BigDecimal) {
    this.set("xfAmount", Value.fromBigDecimal(value));
  }

  get referrerAddr(): Bytes {
    let value = this.get("referrerAddr");
    return value!.toBytes();
  }

  set referrerAddr(value: Bytes) {
    this.set("referrerAddr", Value.fromBytes(value));
  }

  get data0(): BigInt {
    let value = this.get("data0");
    return value!.toBigInt();
  }

  set data0(value: BigInt) {
    this.set("data0", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class _MetaCounts extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _MetaCounts entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _MetaCounts must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_MetaCounts", id.toString(), this);
    }
  }

  static load(id: string): _MetaCounts | null {
    return changetype<_MetaCounts | null>(store.get("_MetaCounts", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class _TokenHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _TokenHolder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _TokenHolder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_TokenHolder", id.toString(), this);
    }
  }

  static load(id: string): _TokenHolder | null {
    return changetype<_TokenHolder | null>(store.get("_TokenHolder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numeralIndex(): BigInt {
    let value = this.get("numeralIndex");
    return value!.toBigInt();
  }

  set numeralIndex(value: BigInt) {
    this.set("numeralIndex", Value.fromBigInt(value));
  }

  get holderAddress(): Bytes {
    let value = this.get("holderAddress");
    return value!.toBytes();
  }

  set holderAddress(value: Bytes) {
    this.set("holderAddress", Value.fromBytes(value));
  }

  get totalSent(): BigDecimal {
    let value = this.get("totalSent");
    return value!.toBigDecimal();
  }

  set totalSent(value: BigDecimal) {
    this.set("totalSent", Value.fromBigDecimal(value));
  }

  get totalReceived(): BigDecimal {
    let value = this.get("totalReceived");
    return value!.toBigDecimal();
  }

  set totalReceived(value: BigDecimal) {
    this.set("totalReceived", Value.fromBigDecimal(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value!.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }

  get createdTimeStamp(): BigInt {
    let value = this.get("createdTimeStamp");
    return value!.toBigInt();
  }

  set createdTimeStamp(value: BigInt) {
    this.set("createdTimeStamp", Value.fromBigInt(value));
  }

  get createdBlocknumber(): BigInt {
    let value = this.get("createdBlocknumber");
    return value!.toBigInt();
  }

  set createdBlocknumber(value: BigInt) {
    this.set("createdBlocknumber", Value.fromBigInt(value));
  }

  get createdHexDay(): BigInt {
    let value = this.get("createdHexDay");
    return value!.toBigInt();
  }

  set createdHexDay(value: BigInt) {
    this.set("createdHexDay", Value.fromBigInt(value));
  }

  get lastModifiedHexDay(): BigInt {
    let value = this.get("lastModifiedHexDay");
    return value!.toBigInt();
  }

  set lastModifiedHexDay(value: BigInt) {
    this.set("lastModifiedHexDay", Value.fromBigInt(value));
  }

  get lastModifiedTimeStamp(): BigInt {
    let value = this.get("lastModifiedTimeStamp");
    return value!.toBigInt();
  }

  set lastModifiedTimeStamp(value: BigInt) {
    this.set("lastModifiedTimeStamp", Value.fromBigInt(value));
  }
}

export class _Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_Transfer", id.toString(), this);
    }
  }

  static load(id: string): _Transfer | null {
    return changetype<_Transfer | null>(store.get("_Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get hexDay(): BigInt {
    let value = this.get("hexDay");
    return value!.toBigInt();
  }

  set hexDay(value: BigInt) {
    this.set("hexDay", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get numeralIndex(): BigInt {
    let value = this.get("numeralIndex");
    return value!.toBigInt();
  }

  set numeralIndex(value: BigInt) {
    this.set("numeralIndex", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value!.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get input(): string {
    let value = this.get("input");
    return value!.toString();
  }

  set input(value: string) {
    this.set("input", Value.fromString(value));
  }

  get methodId(): string | null {
    let value = this.get("methodId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set methodId(value: string | null) {
    if (!value) {
      this.unset("methodId");
    } else {
      this.set("methodId", Value.fromString(<string>value));
    }
  }
}

export class _GlobalInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _GlobalInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _GlobalInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_GlobalInfo", id.toString(), this);
    }
  }

  static load(id: string): _GlobalInfo | null {
    return changetype<_GlobalInfo | null>(store.get("_GlobalInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get allocatedSupply(): BigInt {
    let value = this.get("allocatedSupply");
    return value!.toBigInt();
  }

  set allocatedSupply(value: BigInt) {
    this.set("allocatedSupply", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get lockedHeartsTotal(): BigInt {
    let value = this.get("lockedHeartsTotal");
    return value!.toBigInt();
  }

  set lockedHeartsTotal(value: BigInt) {
    this.set("lockedHeartsTotal", Value.fromBigInt(value));
  }

  get nextStakeSharesTotal(): BigInt {
    let value = this.get("nextStakeSharesTotal");
    return value!.toBigInt();
  }

  set nextStakeSharesTotal(value: BigInt) {
    this.set("nextStakeSharesTotal", Value.fromBigInt(value));
  }

  get shareRate(): BigInt {
    let value = this.get("shareRate");
    return value!.toBigInt();
  }

  set shareRate(value: BigInt) {
    this.set("shareRate", Value.fromBigInt(value));
  }

  get stakePenaltyTotal(): BigInt {
    let value = this.get("stakePenaltyTotal");
    return value!.toBigInt();
  }

  set stakePenaltyTotal(value: BigInt) {
    this.set("stakePenaltyTotal", Value.fromBigInt(value));
  }

  get stakeSharesTotal(): BigInt {
    let value = this.get("stakeSharesTotal");
    return value!.toBigInt();
  }

  set stakeSharesTotal(value: BigInt) {
    this.set("stakeSharesTotal", Value.fromBigInt(value));
  }

  get latestStakeId(): BigInt {
    let value = this.get("latestStakeId");
    return value!.toBigInt();
  }

  set latestStakeId(value: BigInt) {
    this.set("latestStakeId", Value.fromBigInt(value));
  }

  get totalHeartsinCirculation(): BigInt {
    let value = this.get("totalHeartsinCirculation");
    return value!.toBigInt();
  }

  set totalHeartsinCirculation(value: BigInt) {
    this.set("totalHeartsinCirculation", Value.fromBigInt(value));
  }

  get totalMintedHearts(): BigInt {
    let value = this.get("totalMintedHearts");
    return value!.toBigInt();
  }

  set totalMintedHearts(value: BigInt) {
    this.set("totalMintedHearts", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blocknumber(): BigInt {
    let value = this.get("blocknumber");
    return value!.toBigInt();
  }

  set blocknumber(value: BigInt) {
    this.set("blocknumber", Value.fromBigInt(value));
  }

  get hexDay(): BigInt {
    let value = this.get("hexDay");
    return value!.toBigInt();
  }

  set hexDay(value: BigInt) {
    this.set("hexDay", Value.fromBigInt(value));
  }

  get globalInfoCount(): BigDecimal {
    let value = this.get("globalInfoCount");
    return value!.toBigDecimal();
  }

  set globalInfoCount(value: BigDecimal) {
    this.set("globalInfoCount", Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
